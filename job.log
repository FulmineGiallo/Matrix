In file included from zlasdtest/exercise5/../matrix/matrix.hpp:5,
                 from zlasdtest/exercise5/simpletest.cpp:10:
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp: In instantiation of 'class lasd::Matrix<long int>':
zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp:17:7:   required from 'class lasd::MatrixVec<long int>'
zlasdtest/exercise5/simpletest.cpp:203:27:   required from here
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:60:9: error: initializer specified for non-virtual method 'Data& lasd::Matrix<Data>::operator()(long unsigned int, long unsigned int) [with Data = long int]'
   Data& operator()(unsigned long row, unsigned long column) = 0; // Mutable access to the element (concrete function should throw exceptions only when out of range)
         ^~~~~~~~
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:61:15: error: initializer specified for non-virtual method 'const Data& lasd::Matrix<Data>::operator()(long unsigned int, long unsigned int) const [with Data = long int]'
   const Data& operator()(unsigned long row, unsigned long column) const = 0; // Immutable access to the element (concrete function should throw exceptions when not present)
               ^~~~~~~~
In file included from zlasdtest/exercise5/simpletest.cpp:11:
zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp: In instantiation of 'class lasd::MatrixVec<long int>':
zlasdtest/exercise5/simpletest.cpp:203:27:   required from here
zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp:78:15: error: 'const Data& lasd::MatrixVec<Data>::operator()() const [with Data = long int]' marked 'override', but does not override
   const Data& operator()() const override; // Override Matrix member (mutable access to the element; throw out_of_range when out of range)
               ^~~~~~~~
zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp:79:9: error: 'Data& lasd::MatrixVec<Data>::operator()() [with Data = long int]' marked 'override', but does not override
   Data& operator()() override; // Override Matrix member (immutable access to the element; throw out_of_range when out of range and length_error when not present)
         ^~~~~~~~
zlasdtest/exercise5/simpletest.cpp: In function 'void stestMatrixInt(unsigned int&, unsigned int&)':
zlasdtest/exercise5/simpletest.cpp:206:27: error: cannot declare variable 'matcsr' to be of abstract type 'lasd::MatrixCSR<long int>'
     lasd::MatrixCSR<long> matcsr;
                           ^~~~~~
In file included from zlasdtest/exercise5/simpletest.cpp:12:
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note:   because the following virtual functions are pure within 'lasd::MatrixCSR<long int>':
 class MatrixCSR : virtual public Matrix<Data>, public List<Data>
       ^~~~~~~~~
In file included from zlasdtest/exercise5/../matrix/matrix.hpp:5,
                 from zlasdtest/exercise5/simpletest.cpp:10:
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:54:16: note: 	'void lasd::Matrix<Data>::RowResize(long unsigned int) [with Data = long int]'
   virtual void RowResize(unsigned long) = 0;
                ^~~~~~~~~
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:55:16: note: 	'void lasd::Matrix<Data>::ColumnResize(long unsigned int) [with Data = long int]'
   virtual void ColumnResize(unsigned long) = 0;
                ^~~~~~~~~~~~
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:57:16: note: 	'bool lasd::Matrix<Data>::ExistsCell(long unsigned int, long unsigned int) [with Data = long int]'
   virtual bool ExistsCell(unsigned long row, unsigned long column) noexcept = 0; // (concrete function should not throw exceptions) // Se va fuori alle ROW/COLUMN direttamente false. (IF)
                ^~~~~~~~~~
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp: In instantiation of 'class lasd::Matrix<double>':
zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp:17:7:   required from 'class lasd::MatrixVec<double>'
zlasdtest/exercise5/simpletest.cpp:269:35:   required from here
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:60:9: error: initializer specified for non-virtual method 'Data& lasd::Matrix<Data>::operator()(long unsigned int, long unsigned int) [with Data = double]'
   Data& operator()(unsigned long row, unsigned long column) = 0; // Mutable access to the element (concrete function should throw exceptions only when out of range)
         ^~~~~~~~
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:61:15: error: initializer specified for non-virtual method 'const Data& lasd::Matrix<Data>::operator()(long unsigned int, long unsigned int) const [with Data = double]'
   const Data& operator()(unsigned long row, unsigned long column) const = 0; // Immutable access to the element (concrete function should throw exceptions when not present)
               ^~~~~~~~
In file included from zlasdtest/exercise5/simpletest.cpp:11:
zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp: In instantiation of 'class lasd::MatrixVec<double>':
zlasdtest/exercise5/simpletest.cpp:269:35:   required from here
zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp:78:15: error: 'const Data& lasd::MatrixVec<Data>::operator()() const [with Data = double]' marked 'override', but does not override
   const Data& operator()() const override; // Override Matrix member (mutable access to the element; throw out_of_range when out of range)
               ^~~~~~~~
zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp:79:9: error: 'Data& lasd::MatrixVec<Data>::operator()() [with Data = double]' marked 'override', but does not override
   Data& operator()() override; // Override Matrix member (immutable access to the element; throw out_of_range when out of range and length_error when not present)
         ^~~~~~~~
zlasdtest/exercise5/simpletest.cpp: In function 'void stestMatrixFloat(unsigned int&, unsigned int&)':
zlasdtest/exercise5/simpletest.cpp:272:40: error: no matching function for call to 'lasd::MatrixCSR<double>::MatrixCSR(int, int)'
     lasd::MatrixCSR<double> matcsr(4, 3);
                                        ^
In file included from zlasdtest/exercise5/simpletest.cpp:12:
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note: candidate: 'lasd::MatrixCSR<double>::MatrixCSR()'
 class MatrixCSR : virtual public Matrix<Data>, public List<Data>
       ^~~~~~~~~
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note:   candidate expects 0 arguments, 2 provided
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note: candidate: 'lasd::MatrixCSR<double>::MatrixCSR(const lasd::MatrixCSR<double>&)'
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note:   candidate expects 1 argument, 2 provided
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note: candidate: 'lasd::MatrixCSR<double>::MatrixCSR(lasd::MatrixCSR<double>&&)'
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note:   candidate expects 1 argument, 2 provided
zlasdtest/exercise5/simpletest.cpp:272:29: error: cannot declare variable 'matcsr' to be of abstract type 'lasd::MatrixCSR<double>'
     lasd::MatrixCSR<double> matcsr(4, 3);
                             ^~~~~~
In file included from zlasdtest/exercise5/simpletest.cpp:12:
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note:   because the following virtual functions are pure within 'lasd::MatrixCSR<double>':
 class MatrixCSR : virtual public Matrix<Data>, public List<Data>
       ^~~~~~~~~
In file included from zlasdtest/exercise5/../matrix/matrix.hpp:5,
                 from zlasdtest/exercise5/simpletest.cpp:10:
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:54:16: note: 	'void lasd::Matrix<Data>::RowResize(long unsigned int) [with Data = double]'
   virtual void RowResize(unsigned long) = 0;
                ^~~~~~~~~
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:55:16: note: 	'void lasd::Matrix<Data>::ColumnResize(long unsigned int) [with Data = double]'
   virtual void ColumnResize(unsigned long) = 0;
                ^~~~~~~~~~~~
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:57:16: note: 	'bool lasd::Matrix<Data>::ExistsCell(long unsigned int, long unsigned int) [with Data = double]'
   virtual bool ExistsCell(unsigned long row, unsigned long column) noexcept = 0; // (concrete function should not throw exceptions) // Se va fuori alle ROW/COLUMN direttamente false. (IF)
                ^~~~~~~~~~
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp: In instantiation of 'class lasd::Matrix<std::__cxx11::basic_string<char> >':
zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp:17:7:   required from 'class lasd::MatrixVec<std::__cxx11::basic_string<char> >'
zlasdtest/exercise5/simpletest.cpp:330:35:   required from here
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:60:9: error: initializer specified for non-virtual method 'Data& lasd::Matrix<Data>::operator()(long unsigned int, long unsigned int) [with Data = std::__cxx11::basic_string<char>]'
   Data& operator()(unsigned long row, unsigned long column) = 0; // Mutable access to the element (concrete function should throw exceptions only when out of range)
         ^~~~~~~~
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:61:15: error: initializer specified for non-virtual method 'const Data& lasd::Matrix<Data>::operator()(long unsigned int, long unsigned int) const [with Data = std::__cxx11::basic_string<char>]'
   const Data& operator()(unsigned long row, unsigned long column) const = 0; // Immutable access to the element (concrete function should throw exceptions when not present)
               ^~~~~~~~
In file included from zlasdtest/exercise5/simpletest.cpp:11:
zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp: In instantiation of 'class lasd::MatrixVec<std::__cxx11::basic_string<char> >':
zlasdtest/exercise5/simpletest.cpp:330:35:   required from here
zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp:78:15: error: 'const Data& lasd::MatrixVec<Data>::operator()() const [with Data = std::__cxx11::basic_string<char>]' marked 'override', but does not override
   const Data& operator()() const override; // Override Matrix member (mutable access to the element; throw out_of_range when out of range)
               ^~~~~~~~
zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp:79:9: error: 'Data& lasd::MatrixVec<Data>::operator()() [with Data = std::__cxx11::basic_string<char>]' marked 'override', but does not override
   Data& operator()() override; // Override Matrix member (immutable access to the element; throw out_of_range when out of range and length_error when not present)
         ^~~~~~~~
zlasdtest/exercise5/simpletest.cpp: In function 'void stestMatrixString(unsigned int&, unsigned int&)':
zlasdtest/exercise5/simpletest.cpp:333:40: error: no matching function for call to 'lasd::MatrixCSR<std::__cxx11::basic_string<char> >::MatrixCSR(int, int)'
     lasd::MatrixCSR<string> matcsr(3, 3);
                                        ^
In file included from zlasdtest/exercise5/simpletest.cpp:12:
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note: candidate: 'lasd::MatrixCSR<std::__cxx11::basic_string<char> >::MatrixCSR()'
 class MatrixCSR : virtual public Matrix<Data>, public List<Data>
       ^~~~~~~~~
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note:   candidate expects 0 arguments, 2 provided
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note: candidate: 'lasd::MatrixCSR<std::__cxx11::basic_string<char> >::MatrixCSR(const lasd::MatrixCSR<std::__cxx11::basic_string<char> >&)'
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note:   candidate expects 1 argument, 2 provided
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note: candidate: 'lasd::MatrixCSR<std::__cxx11::basic_string<char> >::MatrixCSR(lasd::MatrixCSR<std::__cxx11::basic_string<char> >&&)'
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note:   candidate expects 1 argument, 2 provided
zlasdtest/exercise5/simpletest.cpp:333:29: error: cannot declare variable 'matcsr' to be of abstract type 'lasd::MatrixCSR<std::__cxx11::basic_string<char> >'
     lasd::MatrixCSR<string> matcsr(3, 3);
                             ^~~~~~
In file included from zlasdtest/exercise5/simpletest.cpp:12:
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note:   because the following virtual functions are pure within 'lasd::MatrixCSR<std::__cxx11::basic_string<char> >':
 class MatrixCSR : virtual public Matrix<Data>, public List<Data>
       ^~~~~~~~~
In file included from zlasdtest/exercise5/../matrix/matrix.hpp:5,
                 from zlasdtest/exercise5/simpletest.cpp:10:
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:54:16: note: 	'void lasd::Matrix<Data>::RowResize(long unsigned int) [with Data = std::__cxx11::basic_string<char>]'
   virtual void RowResize(unsigned long) = 0;
                ^~~~~~~~~
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:55:16: note: 	'void lasd::Matrix<Data>::ColumnResize(long unsigned int) [with Data = std::__cxx11::basic_string<char>]'
   virtual void ColumnResize(unsigned long) = 0;
                ^~~~~~~~~~~~
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:57:16: note: 	'bool lasd::Matrix<Data>::ExistsCell(long unsigned int, long unsigned int) [with Data = std::__cxx11::basic_string<char>]'
   virtual bool ExistsCell(unsigned long row, unsigned long column) noexcept = 0; // (concrete function should not throw exceptions) // Se va fuori alle ROW/COLUMN direttamente false. (IF)
                ^~~~~~~~~~
zlasdtest/exercise5/simpletest.cpp: In instantiation of 'void stestMatrixInt(Mat<long int>&, unsigned int&, unsigned int&) [with Mat = lasd::MatrixCSR]':
zlasdtest/exercise5/simpletest.cpp:208:50:   required from here
zlasdtest/exercise5/simpletest.cpp:59:15: error: cannot declare variable 'copmat' to be of abstract type 'lasd::MatrixCSR<long int>'
     Mat<long> copmat(mat);
               ^~~~~~
zlasdtest/exercise5/simpletest.cpp:154:15: error: cannot declare variable 'movmat' to be of abstract type 'lasd::MatrixCSR<long int>'
     Mat<long> movmat(std::move(mat));
               ^~~~~~
zlasdtest/exercise5/simpletest.cpp:180:9: error: use of deleted function 'lasd::MatrixCSR<long int>& lasd::MatrixCSR<long int>::operator=(const lasd::MatrixCSR<long int>&)'
     mat = copmat;
     ~~~~^~~~~~~~
In file included from zlasdtest/exercise5/simpletest.cpp:12:
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note: 'lasd::MatrixCSR<long int>& lasd::MatrixCSR<long int>::operator=(const lasd::MatrixCSR<long int>&)' is implicitly deleted because the default definition would be ill-formed:
 class MatrixCSR : virtual public Matrix<Data>, public List<Data>
       ^~~~~~~~~
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: error: use of deleted function 'lasd::Matrix<Data>& lasd::Matrix<Data>::operator=(const lasd::Matrix<Data>&) [with Data = long int]'
In file included from zlasdtest/exercise5/../matrix/matrix.hpp:5,
                 from zlasdtest/exercise5/simpletest.cpp:10:
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:36:11: note: declared here
   Matrix& operator=(const Matrix&) = delete; // Copy assignment of abstract types should not be possible.
           ^~~~~~~~
zlasdtest/exercise5/simpletest.cpp: In instantiation of 'void stestMatrixFloat(Mat&, unsigned int&, unsigned int&) [with Mat = lasd::MatrixCSR<double>]':
zlasdtest/exercise5/simpletest.cpp:274:52:   required from here
zlasdtest/exercise5/simpletest.cpp:240:9: error: no matching function for call to 'lasd::MatrixCSR<double>::MatrixCSR(int, int)'
     Mat newmat(5, 10);
         ^~~~~~
In file included from zlasdtest/exercise5/simpletest.cpp:12:
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note: candidate: 'lasd::MatrixCSR<double>::MatrixCSR()'
 class MatrixCSR : virtual public Matrix<Data>, public List<Data>
       ^~~~~~~~~
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note:   candidate expects 0 arguments, 2 provided
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note: candidate: 'lasd::MatrixCSR<double>::MatrixCSR(const lasd::MatrixCSR<double>&)'
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note:   candidate expects 1 argument, 2 provided
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note: candidate: 'lasd::MatrixCSR<double>::MatrixCSR(lasd::MatrixCSR<double>&&)'
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note:   candidate expects 1 argument, 2 provided
zlasdtest/exercise5/simpletest.cpp:240:9: error: cannot declare variable 'newmat' to be of abstract type 'lasd::MatrixCSR<double>'
     Mat newmat(5, 10);
         ^~~~~~
zlasdtest/exercise5/simpletest.cpp:241:12: error: use of deleted function 'lasd::MatrixCSR<double>& lasd::MatrixCSR<double>::operator=(lasd::MatrixCSR<double>&&)'
     newmat = std::move(mat);
     ~~~~~~~^~~~~~~~~~~~~~~~
In file included from zlasdtest/exercise5/simpletest.cpp:12:
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: note: 'lasd::MatrixCSR<double>& lasd::MatrixCSR<double>::operator=(lasd::MatrixCSR<double>&&)' is implicitly deleted because the default definition would be ill-formed:
 class MatrixCSR : virtual public Matrix<Data>, public List<Data>
       ^~~~~~~~~
zlasdtest/exercise5/../../matrix/csr/matrixcsr.hpp:19:7: error: use of deleted function 'lasd::Matrix<Data>& lasd::Matrix<Data>::operator=(lasd::Matrix<Data>&&) [with Data = double]'
In file included from zlasdtest/exercise5/../matrix/matrix.hpp:5,
                 from zlasdtest/exercise5/simpletest.cpp:10:
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:39:11: note: declared here
   Matrix& operator=(Matrix&&) noexcept = delete; // Move assignment of abstract types should not be possible.
           ^~~~~~~~
In file included from zlasdtest/exercise5/simpletest.cpp:10:
zlasdtest/exercise5/../matrix/matrix.hpp: In instantiation of 'void ExistsCell(unsigned int&, unsigned int&, const lasd::Matrix<Data>&, bool, long unsigned int, long unsigned int) [with Data = long int]':
zlasdtest/exercise5/simpletest.cpp:31:15:   required from 'void stestMatrixInt(Mat<long int>&, unsigned int&, unsigned int&) [with Mat = lasd::MatrixVec]'
zlasdtest/exercise5/simpletest.cpp:205:50:   required from here
zlasdtest/exercise5/../matrix/matrix.hpp:102:109: error: passing 'const lasd::Matrix<long int>' as 'this' argument discards qualifiers [-fpermissive]
     std::cout << " " << testnum << " (" << testerr << ") The cell (" << row << ", " << col << ") " << ((tst = mat.ExistsCell(row, col)) ? "does" : "does not") << " exist: ";
                                                                                                        ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from zlasdtest/exercise5/../matrix/matrix.hpp:5,
                 from zlasdtest/exercise5/simpletest.cpp:10:
zlasdtest/exercise5/../matrix/../../matrix/matrix.hpp:57:16: note:   in call to 'bool lasd::Matrix<Data>::ExistsCell(long unsigned int, long unsigned int) [with Data = long int]'
   virtual bool ExistsCell(unsigned long row, unsigned long column) noexcept = 0; // (concrete function should not throw exceptions) // Se va fuori alle ROW/COLUMN direttamente false. (IF)
                ^~~~~~~~~~
In file included from zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp:107,
                 from zlasdtest/exercise5/simpletest.cpp:11:
zlasdtest/exercise5/../../matrix/vec/matrixvec.cpp: In instantiation of 'void lasd::MatrixVec<Data>::ColumnResize(long unsigned int) [with Data = std::__cxx11::basic_string<char>]':
zlasdtest/exercise5/../../matrix/vec/matrixvec.cpp:60:6:   required from here
zlasdtest/exercise5/../../matrix/vec/matrixvec.cpp:75:16: error: no match for 'operator=' (operand types are 'std::__cxx11::basic_string<char>' and 'lasd::MatrixVec<std::__cxx11::basic_string<char> >')
         vec[k] = this[i];
         ~~~~~~~^~~~~~~
In file included from C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/lib/gcc/i686-w64-mingw32/8.1.0/include/c++/string:52,
                 from C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/lib/gcc/i686-w64-mingw32/8.1.0/include/c++/bits/locale_classes.h:40,
                 from C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/lib/gcc/i686-w64-mingw32/8.1.0/include/c++/bits/ios_base.h:41,
                 from C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/lib/gcc/i686-w64-mingw32/8.1.0/include/c++/ios:42,
                 from C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/lib/gcc/i686-w64-mingw32/8.1.0/include/c++/ostream:38,
                 from C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/lib/gcc/i686-w64-mingw32/8.1.0/include/c++/iostream:39,
                 from zlasdtest/exercise5/simpletest.cpp:2:
C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/lib/gcc/i686-w64-mingw32/8.1.0/include/c++/bits/basic_string.h:654:7: note: candidate: 'std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]'
       operator=(const basic_string& __str)
       ^~~~~~~~
C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/lib/gcc/i686-w64-mingw32/8.1.0/include/c++/bits/basic_string.h:654:7: note:   no known conversion for argument 1 from 'lasd::MatrixVec<std::__cxx11::basic_string<char> >' to 'const std::__cxx11::basic_string<char>&'
C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/lib/gcc/i686-w64-mingw32/8.1.0/include/c++/bits/basic_string.h:693:7: note: candidate: 'std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]'
       operator=(const _CharT* __s)
       ^~~~~~~~
C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/lib/gcc/i686-w64-mingw32/8.1.0/include/c++/bits/basic_string.h:693:7: note:   no known conversion for argument 1 from 'lasd::MatrixVec<std::__cxx11::basic_string<char> >' to 'const char*'
C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/lib/gcc/i686-w64-mingw32/8.1.0/include/c++/bits/basic_string.h:704:7: note: candidate: 'std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(_CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]'
       operator=(_CharT __c)
       ^~~~~~~~
C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/lib/gcc/i686-w64-mingw32/8.1.0/include/c++/bits/basic_string.h:704:7: note:   no known conversion for argument 1 from 'lasd::MatrixVec<std::__cxx11::basic_string<char> >' to 'char'
C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/lib/gcc/i686-w64-mingw32/8.1.0/include/c++/bits/basic_string.h:722:7: note: candidate: 'std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]'
       operator=(basic_string&& __str)
       ^~~~~~~~
C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/lib/gcc/i686-w64-mingw32/8.1.0/include/c++/bits/basic_string.h:722:7: note:   no known conversion for argument 1 from 'lasd::MatrixVec<std::__cxx11::basic_string<char> >' to 'std::__cxx11::basic_string<char>&&'
C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/lib/gcc/i686-w64-mingw32/8.1.0/include/c++/bits/basic_string.h:776:7: note: candidate: 'std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(std::initializer_list<_Tp>) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]'
       operator=(initializer_list<_CharT> __l)
       ^~~~~~~~
C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/lib/gcc/i686-w64-mingw32/8.1.0/include/c++/bits/basic_string.h:776:7: note:   no known conversion for argument 1 from 'lasd::MatrixVec<std::__cxx11::basic_string<char> >' to 'std::initializer_list<char>'
In file included from zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp:107,
                 from zlasdtest/exercise5/simpletest.cpp:11:
zlasdtest/exercise5/../../matrix/vec/matrixvec.cpp:78:20: error: request for member 'Element' in '(lasd::MatrixVec<std::__cxx11::basic_string<char> >*)this', which is of pointer type 'lasd::MatrixVec<std::__cxx11::basic_string<char> >*' (maybe you meant to use '->' ?)
     std::swap(this.Element, vec.Elements);
               ~~~~~^~~~~~~
zlasdtest/exercise5/../../matrix/vec/matrixvec.cpp:78:33: error: 'std::__cxx11::basic_string<char>* lasd::Vector<std::__cxx11::basic_string<char> >::Elements' is protected within this context
     std::swap(this.Element, vec.Elements);
                             ~~~~^~~~~~~~
In file included from zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp:8,
                 from zlasdtest/exercise5/simpletest.cpp:11:
C:/Users/Carmi/Documents/GitHub/Matrix/vector/vector.hpp:25:24: note: declared protected here
       Data* Elements = nullptr;
                        ^~~~~~~
In file included from zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp:107,
                 from zlasdtest/exercise5/simpletest.cpp:11:
zlasdtest/exercise5/../../matrix/vec/matrixvec.cpp: In instantiation of 'void lasd::MatrixVec<Data>::ColumnResize(long unsigned int) [with Data = double]':
zlasdtest/exercise5/../../matrix/vec/matrixvec.cpp:60:6:   required from here
zlasdtest/exercise5/../../matrix/vec/matrixvec.cpp:75:16: error: cannot convert 'lasd::MatrixVec<double>' to 'double' in assignment
         vec[k] = this[i];
         ~~~~~~~^~~~~~~
zlasdtest/exercise5/../../matrix/vec/matrixvec.cpp:78:20: error: request for member 'Element' in '(lasd::MatrixVec<double>*)this', which is of pointer type 'lasd::MatrixVec<double>*' (maybe you meant to use '->' ?)
     std::swap(this.Element, vec.Elements);
               ~~~~~^~~~~~~
zlasdtest/exercise5/../../matrix/vec/matrixvec.cpp:78:33: error: 'double* lasd::Vector<double>::Elements' is protected within this context
     std::swap(this.Element, vec.Elements);
                             ~~~~^~~~~~~~
In file included from zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp:8,
                 from zlasdtest/exercise5/simpletest.cpp:11:
C:/Users/Carmi/Documents/GitHub/Matrix/vector/vector.hpp:25:24: note: declared protected here
       Data* Elements = nullptr;
                        ^~~~~~~
In file included from zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp:107,
                 from zlasdtest/exercise5/simpletest.cpp:11:
zlasdtest/exercise5/../../matrix/vec/matrixvec.cpp: In instantiation of 'void lasd::MatrixVec<Data>::ColumnResize(long unsigned int) [with Data = long int]':
zlasdtest/exercise5/../../matrix/vec/matrixvec.cpp:60:6:   required from here
zlasdtest/exercise5/../../matrix/vec/matrixvec.cpp:75:16: error: cannot convert 'lasd::MatrixVec<long int>' to 'long int' in assignment
         vec[k] = this[i];
         ~~~~~~~^~~~~~~
zlasdtest/exercise5/../../matrix/vec/matrixvec.cpp:78:20: error: request for member 'Element' in '(lasd::MatrixVec<long int>*)this', which is of pointer type 'lasd::MatrixVec<long int>*' (maybe you meant to use '->' ?)
     std::swap(this.Element, vec.Elements);
               ~~~~~^~~~~~~
zlasdtest/exercise5/../../matrix/vec/matrixvec.cpp:78:33: error: 'long int* lasd::Vector<long int>::Elements' is protected within this context
     std::swap(this.Element, vec.Elements);
                             ~~~~^~~~~~~~
In file included from zlasdtest/exercise5/../../matrix/vec/matrixvec.hpp:8,
                 from zlasdtest/exercise5/simpletest.cpp:11:
C:/Users/Carmi/Documents/GitHub/Matrix/vector/vector.hpp:25:24: note: declared protected here
       Data* Elements = nullptr;
                        ^~~~~~~
